/* 
 * Class: GregValure.NaturalDocs.Engine.Languages.ParseState
 * ____________________________________________________________________________
 * 
 * A class that contains all the state variables needed by a <Language> during parsing.  This allows parsing to be
 * broken up into functions easily since this can be passed between them, but without making them member
 * variables of <Language> so that one object can be used for parsing by multiple threads.
 */

// This file is part of Natural Docs, which is Copyright © 2003-2011 Greg Valure.
// Natural Docs is licensed under version 3 of the GNU Affero General Public License (AGPL)
// Refer to License.txt for the complete details


using System;
using System.Collections.Generic;
using GregValure.NaturalDocs.Engine.Tokenization;
using GregValure.NaturalDocs.Engine.Comments;


namespace GregValure.NaturalDocs.Engine.Languages
	{
	public class ParseState
		{
		
		// Group: Functions
		// __________________________________________________________________________
		
		
		/* Function: ParseState
		 */
		public ParseState ()
			{
			TokenizedSourceCode = null;
			CancelDelegate = Delegates.NeverCancel;
			
			PossibleDocumentationComments = null;
			CommentTopics = null;
			CodeTopics = null;
			MergedTopics = null;
			}
	


			
		// Group: Properties and Variables
		// __________________________________________________________________________
		
		
		/* var: TokenizedSourceCode
		 * The source code in a <Tokenizer>.
		 */
		public Tokenizer TokenizedSourceCode;
			
			
		/* var: CancelDelegate
		 * The delegate that controls whether parsing should be interrupted midway.  Use <Delegates.NeverCancel>l if it's not 
		 * necessary.
		 */
		public CancelDelegate CancelDelegate;
		
			
		/* Property: Cancelled
		 * Whether parsing should be interrupted midway.
		 */
		public bool Cancelled
			{
			get
				{  return CancelDelegate();  }
			}
			
			
		/* var: PossibleDocumentationComments
		 * A list of <PossibleDocumentationComment>s retrieved from <TokenizedSourceCode>.
		 */
		public List<PossibleDocumentationComment> PossibleDocumentationComments;
		
		/* var: CommentTopics
		 * A list of <Topics> generated by the source file's comments.
		 */
		public List<Topic> CommentTopics;
		
		/* var: CodeTopics
		 * A list of <Topics> generated by the source file's code.
		 */
		public List<Topic> CodeTopics;
		
		/* var: MergedTopics
		 * A list of <Topics> created by merging <CommentTopics> and <CodeTopics>.
		 */
		public List<Topic> MergedTopics;
		
		}
	}