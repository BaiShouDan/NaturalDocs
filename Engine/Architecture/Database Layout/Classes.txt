
Database Table: CodeDB.Classes
_______________________________________________________________________________

The table that contains all of the classes used by <Topics>.  The Classes table also represents other hierarchies
such as databases.



Group: Columns
_______________________________________________________________________________


Column: ClassID

	(SQL Prototype)
		ClassID INTEGER PRIMARY KEY NOT NULL
	(end)
	
	The class identifier.


Column: ClassString

	(SQL Prototype)
		ClassString TEXT
	(end)
	
	The class information encoded with <Engine.Symbols.ClassString>.  If this is the same as <LookupKey> this
	will be null to reduce memory use.  Retrieve it using "ifnull(ClassString, LookupKey)" or 
	"coalesce(ClassString, LookupKey)" in the select statement.


Column: LookupKey

	(SQL Prototype)
		LookupKey TEXT NOT NULL
	(end)

	This is the same as <ClassString>, except that if the language is case insensitive the symbol portion will be in 
	lowercase.  You look up records with this key to allow for case insensitivity but you use <ClassString> so you 
	can preserve the case as it was entered.


Column: Hierarchy

	(SQL Prototype)
		Hierarchy INTEGER NOT NULL
	(end)

	Which hierarchy the class belongs to.  Although this information is encoded in <ClassString>, also having it
	as a separate column allows you to use it as a filter in a query.
	
	It will be one of these values, which match the values of 
	<GregValure.NaturalDocs.Engine.Symbols.ClassString.HierarchyType>:

	1 - Classes
	2 - Database


Column: ReferenceCount

	(SQL Prototype)
		ReferenceCount INTEGER NOT NULL
	(end)

	The number of times this class is used.



Group: Indexes
_______________________________________________________________________________


Index: ClassesByID

	(SQL Prototype)
		ClassID INTEGER PRIMARY KEY NOT NULL
	(end)

	Automatically created by ClassID being defined as a primary key.


Index: ClassesByLookupKey

	(SQL Prototype)
		CREATE INDEX ClassesByLookupKey ON Classes (LookupKey)
	(end)


Index: ClassesByHierarchy

	(SQL Prototype)
		CREATE INDEX ClassesByHierarchy ON Classes (Hierarchy)
	(end)