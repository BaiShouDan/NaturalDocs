
Database Table: CodeDB.Topics
_______________________________________________________________________________

The table that contains all the topics found by Natural Docs.



Group: Columns
_______________________________________________________________________________


Column: TopicID

	(SQL Prototype)
		TopicID INTEGER PRIMARY KEY NOT NULL
	(end)
	
	The topic identifier.
	
	
Column: Title

	(SQL Prototype)
		Title TEXT NOT NULL
	(end)
	
	The topic's title as it should appear in the output.
	
	
Column: Body

	(SQL Prototype)
		Body TEXT
	(end)
	
	The body of the topic, if any.
	
	
Column: Summary

	(SQL Prototype)
		Summary TEXT
	(end)
	
	The summary of the topic, if any.
	
	
Column: Prototype

	(SQL Prototype)
		Prototype TEXT
	(end)
	
	The plain-text prototype of the topic, if any.
	
	
Column: Symbol

	(SQL Prototype)
		Symbol TEXT NOT NULL
	(end)
	
	The fully resolved, normalized <Symbols.SymbolString> of the topic.
	

Column: SymbolDefinitionNumber

	(SQL Prototype)
		SymbolDefinitionNumber INTEGER NOT NULL
	(end)

	Every unique <Symbol> defined in a file is given a number, the first one being one.  Every duplicate definition
	of the same symbol will receive an incremented number based on the source file order.


Column: IsEmbedded

	(SQL Prototype)
		IsEmbedded INTEGER NOT NULL
	(end)

	Whether this topic is embedded in a prior topic, stored as 1 or 0.  This is used to support lists.  Entries that 
	appear in definition lists within a list topic will get their own record to allow for linking, but they will not appear
	in the output because they are already covered by the parent.


Column: EndingSymbol

	(SQL Prototype)
		EndingSymbol TEXT NOT NULL
	(end)
	
	The <Symbols.EndingSymbol> that's derived from <Symbol>.
	
	
Column: TopicTypeID

	(SQL Prototype)
		TopicTypeID INTEGER NOT NULL
	(end)
	
	The ID of the topic's type, as managed by <GregValure.NaturalDocs.Engine.TopicTypes.Manager>.
	
	
Column: AccessLevel

	(SQL Prototype)
		AccessLevel INTEGER NOT NULL
	(end)
	
	The access level of the topic, such as public or protected.  The value is managed by 
	<GregValure.NaturalDocs.Engine.Languages.AccessLevel>.
	
	
Column: Tags

	(SQL Prototype)
		Tags TEXT
	(end)
	
	A number set of all the tags applied to this topic, as managed by <GregValure.NaturalDocs.Engine.TopicTypes.Manager>.
	Is a string encoding of a <GregValure.NaturalDocs.Engine.IDObjects.NumberSet>.


Column: FileID

	(SQL Prototype)
		FileID INTEGER NOT NULL
	(end)
	
	The ID of the file it appears in, as managed by <GregValure.NaturalDocs.Engine.Files.Manager>.
	

Column: CommentLineNumber

	(SQL Prototype)
		CommentLineNumber INTEGER NOT NULL
	(end)
	
	The line number the topic's comment appears on.  If the topic doesn't have a comment, it will be the same
	as <CodeLineNumber>.
	
	
Column: CodeLineNumber
	
	(SQL Prototype)
		CodeLineNumber INTEGER NOT NULL
	(end)
	
	The line number the topic's code element appears on.  If the topic doesn't have a code element, it will be
	the same as <CommentLineNumber>.
	
	
Column: LanguageID

	(SQL Prototype)
		LanguageID INTEGER NOT NULL
	(end)
	
	The ID of the topic's language, as managed by <GregValure.NaturalDocs.Engine.Languages.Manager>.  If the
	file it appears in is a container file (such as .cgi or .asp) the ID will be for the embedded language, not the
	container.
	
	
Column: PrototypeContextID

	(SQL Prototype)
		PrototypeContextID INTEGER NOT NULL
	(end)
	
	The ID of the context any prototype links should appear in.
	
	
Column: BodyContextID

	(SQL Prototype)
		BodyContextID INTEGER NOT NULL
	(end)
	
	The ID of the context any body links should appear in.
	
	

Group: Indexes
_______________________________________________________________________________


Index: TopicsByID

	(SQL Prototype)
		TopicID INTEGER PRIMARY KEY NOT NULL
	(end)

	Automatically created by TopicID being defined as a primary key.


Index: TopicsByFile

	(SQL Prototype)
		CREATE INDEX TopicsByFile ON Topics (FileID, CommentLineNumber)
	(end)


Index: TopicsByEndingSymbol

	(SQL Prototype)
		CREATE INDEX TopicsByEndingSymbol ON Topics (EndingSymbol)
	(end)
