Format: 2.0 (Development Release 01-26-2009)

# This is the main Natural Docs languages file.  If you change anything here,
# it will apply to EVERY PROJECT you use Natural Docs on.  It's recommended
# that you edit the version in your project configuration folder instead.
# This will keep your changes separate so you won't have to reapply them
# whenever you upgrade Natural Docs.


# Languages
#-------------------------------------------------------------------------
# These define the languages Natural Docs knows how to parse.
#
# Unlike other Natural Docs configuration files, in this file all comments
# MUST be alone on a line.  Some languages deal with the # character, so you
# cannot put comments on the same line as content.
#
# Also, all lists are separated with spaces, not commas, again because some
# languages may need to use them.
#
# Language: [name]
#    Defines a new language.  Its name can use any characters.
#
#    The language Shebang Script is special.  It's entry is only used for
#    extensions, and files with those extensions have their shebang (#!) lines
#    read to determine the real language of the file.  Extensionless files are
#    always treated this way.
#
#    The language Text File is also special.  It's treated as one big comment
#    so you can put Natural Docs content in them without special symbols.  Also,
#    if you don't specify a member operator or enum value behavior, it will
#    copy those settings from the language that is used most in the source tree.
#
# Extensions: [extension] [extension] ...
#    Defines the file extensions of the language's source files.
#
# Shebang Strings: [string] [string] ...
#    Defines a list of strings that can appear in the shebang (#!) line to
#    designate that it's part of the language.
#
# Simple Identifier: [name]
#    The name of the language using only the letters A to Z.  No spaces,
#    numbers, symbols, or Unicode allowed.  Defaults to the language name
#    minus any unacceptable characters.  This is used to generate things like
#    CSS class names.
#
# Aliases: [alias] [alias] ...
#    Defines alternate names for the language that can be used in code block
#    tags like (start c++ code).
#
#
# Properties for Basic Language Support Only
#-------------------------------------------------------------------------
# If you're adding your own language to Natural Docs, you must define these.
#
# Line Comments: [symbol] [symbol] ...
#    Defines a space-separated list of symbols that are used for line comments,
#    if any.
#
# Block Comments: [opening sym] [closing sym] [opening sym] [closing sym] ...
#    Defines a space-separated list of symbol pairs that are used for block
#    comments, if any.
#
# Member Operator: [symbol]
#    Defines the default member operator symbol.  The default is a dot.
#
# Line Extender: [symbol]
#    Defines the symbol that allows a prototype to span multiple lines if
#    normally a line break would end it.
#
# Enum Values: [global|under type|under parent]
#    Defines how enum values are referenced.  The default is global.
#    global       - Values are always global, referenced as 'value'.
#    under type   - Values are under the enum type, referenced as
#                 'class.enum.value'.
#    under parent - Values are under the enum's parent, referenced as
#                 'class.value'.
#
# [Topic Type] Prototype Enders: [symbol] [symbol] ...
#    When defined, Natural Docs will attempt to get a prototype from the code
#    immediately following the topic type.  It stops when it reaches one of
#    these symbols.  Use \n for line breaks.


Language: Text File

   Extension: txt


Language: Shebang Script

   Extension: cgi


Language: C/C++

   Extensions: c cpp cxx h hpp hxx

   Simple Identifier: C
   Aliases: C C++

   Line Comment: //
   Block Comment: /* */
   Member Operator: ::
   Enum Value: Under Parent

   Class Prototype Enders: ; {
   Function Prototype Enders: ; {
   Variable Prototype Enders: ; =


Language: C#

   Extension: cs

   Simple Identifier: CSharp

   Line Comment: //
   Block Comment: /* */
   Enum Value: Under Type

   Class Prototype Enders: ; {
   Function Prototype Enders: ; {
   Variable Prototype Enders: ; =


Language: Java

   Extension: java

   Line Comment: //
   Block Comment: /* */
   Enum Value: Under Type

   Function Prototype Ender: {
   Variable Prototype Enders: ; =


Language: JavaScript

   Extension: js

   Alias: JS

   Line Comment: //
   Block Comment: /* */
   Enum Value: Under Type

   Function Prototype Ender: {
   Variable Prototype Enders: ; =


Language: Perl

   Extensions: pl pm
   Shebang String: perl

   Line Comment: #

   Function Prototype Ender: {
   Variable Prototype Enders: ; =


Language: Python

   Extension: py
   Shebang String: python

   Line Comment: #
   Line Extender: \

   Function Prototype Ender: :
   Variable Prototype Ender: =


Language: PHP

   Extensions: inc php php3 php4 phtml
   Shebang String: php

   Line Comment: // #
   Block Comment: /* */

   Function Prototype Enders: ; {
   Variable Prototype Enders: ; =


Language: SQL

   Extension: sql
   
   Alias: PL/SQL

   Line Comment: --
   Block Comment: /* */
   Enum Value: Global

   Function Prototype Enders: , ; ) as As AS is Is IS
   Variable Prototype Enders: , ; ) := default Default DEFAULT
   Database Index Prototype Enders: , ; )
   Database Trigger Prototype Enders: begin Begin BEGIN as As AS


Language: Visual Basic

   Extensions: vb vbs bas cls frm

   Alias: VB

   Line Comment: '
   Line Extender: _
   Enum Value: Under Type

   Function Prototype Ender: \n
   Variable Prototype Enders: \n =


Language: Pascal

   Extension: pas

   Line Comment: //
   Block Comment: { } (* *)

   Function Prototype Ender: ;
   Variable Prototype Enders: ; =


Language: Assembly

   Extension: asm

   Alias: ASM

   Line Comment: ;
   Line Extender: \

   Variable Prototype Ender: \n


Language: Ada

   Extensions: ada ads adb

   Line Comment: --

   Function Prototype Enders: ; is Is IS
   Variable Prototype Enders: ; :=


Language: Tcl

   Extensions: tcl exp
   Shebang Strings: tclsh wish expect

   Line Comment: #
   Member Operator: ::
   Line Extender: \

   Function Prototype Enders: ; {
   Variable Prototype Enders: ; \n


Language: Ruby

   Extension: rb
   Shebang String: ruby

   Line Comment: #
   Line Extender: \
   Enum Value: Under Parent

   Function Prototype Enders: ; \n
   Variable Prototype Enders: ; \n =


Language: Makefile

   Extensions: mk mak make

   Line Comment: #


Language: ActionScript

   Extensions: as mxml

   Alias: AS

   Line Comment: //
   Block Comment: /* */

   Function Prototype Enders: ; {
   Variable Prototype Enders: ; =


Language: ColdFusion

   Extensions: cfm cfml cfc

   Line Comment: //
   Block Comment: <!--- ---> /* */

   Function Prototype Enders: { <


Language: R

   Extension: r

   Line Comment: #

   Function Prototype Enders: { ;
   Variable Prototype Enders: <- = ; \n


Language: Fortran

   Extensions: f90 f95 f03

   Line Comment: !
   Line Extender: &

   Function Prototype Ender: \n
   Variable Prototype Enders: \n = =>
