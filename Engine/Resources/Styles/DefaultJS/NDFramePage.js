/*
	Include in output:

	This file is part of Natural Docs, which is Copyright © 2003-2011 Greg Valure.
	Natural Docs is licensed under version 3 of the GNU Affero General Public
	License (AGPL).  Refer to License.txt or www.naturaldocs.org for the
	complete details.

	This file may be distributed with documentation files generated by Natural Docs.
	Such documentation is not covered by Natural Docs' copyright and licensing,
	and may have its own copyright and distribution terms as decided by its author.

	This file includes code derived from jQuery HashChange Event, which is
	Copyright © 2010 "Cowboy" Ben Alman.  jQuery HashChange Event may be
	obtained separately under the MIT license or the GNU General Public License (GPL).
	However, this combined product is still licensed under the terms of the AGPLv3.

*/

"use strict";


/* Class: NDFramePage
	_____________________________________________________________________________

	Topic: URL Hash Format

		File References:

			> #File[number unless 1]:[full path]:[full symbol (optional)]
			>
			> #File:source/module/file.cs
			> #File3:source/module/file.cs:Namespace.Package.Function

		Path Restrictions:

			Because of the above format, generated file paths cannot contain the colon character.  This is
			documented in <GregValure.NaturalDocs.Engine.Output.Builders.HTML.Path Restrictions>.

*/
var NDFramePage = new function ()
	{

	// Group: Functions
	// ________________________________________________________________________


	/* Function: Start
	*/
	this.Start = function ()
		{
		// The default title of the page is the project title.  Save a copy before we mess with it.
		this.projectTitle = document.title;


		var ieVersion = NDCore.IEVersion();

		if (ieVersion == 6)
			{
			// IE 6 doesn't like fixed positioning the way other browsers do.

			document.getElementsByTagName("html")[0].style.overflow = "hidden";

			document.getElementById("NDHeader").style.position = "absolute";
			document.getElementById("NDFooter").style.position = "absolute";
			document.getElementById("NDMenu").style.position = "absolute";
			document.getElementById("NDSummary").style.position = "absolute";
			document.getElementById("NDContent").style.position = "absolute";
			document.getElementById("NDMessages").style.position = "absolute";
			}

		if (ieVersion !== undefined)
			{
			// IE will sometimes put a disabled scrollbar on the right side of the window if this isn't done.  It isn't always
			// predictable though.  IE 7 will always do it in my virtual machine, but IE 6 and 8 won't.  However, IE 8 does
			// do it on a different computer even though they're both running the same version and are both XP.  Weird.
			// Since it shouldn't have any detrimental effect, add it for all IE versions just to be safe.

			document.getElementsByTagName("html")[0].style.overflow = "hidden";
			}

		this.topmostPanel = `FilePanel;
		this.summaryPanelIsExpanded = true;

		// OnResize will position all the page elements for the first time.
		this.OnResize();
		window.onresize = this.OnResize;

		// Start the navigation objects.  It's okay that the hash variables aren't filled in yet.  They do not read them
		// directly from this class but get them from functions like GoToFileHashPath().
		NDMenu.Start();
		NDSummary.Start();

		// OnHashChange will call DecodeHash which will fill in all the hash variables.  It will then set the navigation
		// objects to the proper location.
		this.OnHashChange();
		this.AddHashChangeHandler();
		};


	/* Function: OnResize
	*/
	this.OnResize = function ()
		{
		var width = NDCore.WindowClientWidth();
		var height = NDCore.WindowClientHeight();

		var header = document.getElementById("NDHeader");
		var footer = document.getElementById("NDFooter");
		var menu = document.getElementById("NDMenu");
		var summary = document.getElementById("NDSummary");
		var content = document.getElementById("NDContent");
		var messages = document.getElementById("NDMessages");

		NDCore.SetToAbsolutePosition(header, 0, 0, width, undefined);
		NDCore.SetToAbsolutePosition(footer, 0, undefined, width, undefined);

		var headerHeight = header.offsetHeight;
		var footerHeight = footer.offsetHeight;

		// We needed separate calls to set the footer's Y position and width since wrapping may change its height.
		NDCore.SetToAbsolutePosition(footer, undefined, height - footerHeight, undefined, undefined);

		var menuWidth = menu.offsetWidth;
		var summaryWidth = Math.floor(menuWidth * 1.1);

		NDCore.SetToAbsolutePosition(menu, 0, headerHeight, menuWidth, height - headerHeight - footerHeight);
		NDCore.SetToAbsolutePosition(summary, menuWidth, headerHeight, summaryWidth, height - headerHeight - footerHeight);
		NDCore.SetToAbsolutePosition(content, menuWidth + summaryWidth, headerHeight, width - menuWidth - summaryWidth, height - headerHeight - footerHeight);

		NDCore.SetToAbsolutePosition(messages, menuWidth, 0, width - menuWidth, undefined);
		};


	/* Function: Message
		Posts a message on the screen.
	*/
	this.Message = function (message)
		{
		var htmlEntry = document.createElement("div");
		htmlEntry.className = "MsgMessage";

		var htmlMessage = document.createTextNode(message);
		htmlEntry.appendChild(htmlMessage);

		document.getElementById("MsgContent").appendChild(htmlEntry);
		document.getElementById("NDMessages").style.display = "block";
		this.OnResize();
		};


	/* Function: CloseMessages
	*/
	this.CloseMessages = function ()
		{
		document.getElementById("NDMessages").style.display = "none";
		document.getElementById("MsgContent").innerHTML = "";
		};



	// Group: Hash and Navigation Functions
	// ________________________________________________________________________


	/* Function: DecodeHash
		Converts the hash into the variables <hashType>, <hashPath>, <contentPath>, and <hashAnchor>.
	*/
	this.DecodeHash = function ()
		{
		// Strip the hash symbol and everything before.  If there's no hash symbol, indexOf returning -1 means substr
		// will return the whole thing.
		var hash = location.hash.substr(location.hash.indexOf("#") + 1);

		if (NDCore.IsFileHashPath(hash))
			{
			this.hashType = `FileHash;

			// The first colon after File:, which will always exist if we're a file hash path.
			var anchorSeparator = hash.indexOf(':');

			// The second colon for the anchor, which may or may not exist.
			anchorSeparator = hash.indexOf(':', anchorSeparator + 1);

			if (anchorSeparator == -1)
				{
				this.hashPath = hash;
				this.hashAnchor = undefined;
				}
			else
				{
				this.hashPath = hash.substr(0, anchorSeparator);
				this.hashArchor = hash.substr(anchorSeparator + 1);
				}

			this.contentPath = NDCore.FileHashPathToContentPath(this.hashPath);
			}

		else
			{
			// All empty and invalid hashes show the home page.
			this.hashType = `HomeHash;
			this.hashPath = undefined;
			this.hashAnchor = undefined;
			this.contentPath = "other/home.html";
			}
		};


	/* Function: OnHashChange
	*/
	this.OnHashChange = function ()
		{
		this.DecodeHash();

		// Set the content page
		var frame = document.getElementById("CFrame");
		frame.contentWindow.location.replace(this.contentPath);

		// Set focus to the content page iframe so that keyboard scrolling works without clicking over to it.
		frame.contentWindow.focus();

		if (this.hashType == `FileHash)
			{
			NDMenu.GoToFileHashPath(this.hashPath);
			NDSummary.GoToFileHashPath(this.hashPath);
			// NDSummary will load the metadata file that calls UpdatePageTitle().
			}
		else
			{
			// Update the page title manually since there's no metadata to do it.
			this.UpdatePageTitle();

			// Reset back to the default state.
			NDMenu.GoToFileHashPath("");
			}
		};


	/* Function: OnPageTitleLoaded
		Called by a source file's metadata when it's loaded.
	*/
	this.OnPageTitleLoaded = function (hashPath, title)
		{
		if (hashPath == this.hashPath)
			{  this.UpdatePageTitle(title);  }
		};


	/* Function: UpdatePageTitle
	*/
	this.UpdatePageTitle = function (pageTitle)
		{
		if (pageTitle)
			{  document.title = pageTitle + " - " + this.projectTitle;  }
		else
			{  document.title = this.projectTitle;  }
		};


	/* Function: AddHashChangeHandler
		Sets up <OnHashChange()> to be called whenever a hash change event occurs.  Based on jQuery HashChange
		Event because not all browsers support window.onhashchange.
	*/
	this.AddHashChangeHandler = function ()
		{
		// If the browser supports onhashchange...

		// Note that IE8 running in IE7 compatibility mode reports true for "onhashchange" in window even
		// though the event isn't supported, so also test document.documentMode.
		if ("onhashchange" in window && (document.documentMode === undefined || document.documentMode > 7))
			{
			// If we don't do it this way the "this" parameter doesn't get set.
			window.onhashchange = function () {  NDFramePage.OnHashChange();  };
			}

		// If browser doesn't support onhashchange...
		else
			{
			this.hashChangePoller = {
				// timeoutID: undefined,
				timeoutLength: 200,  // Every fifth of a second

				// Remember the initial hash so it doesn't get triggered immediately.
				lastHash: location.hash
				};

			// Non-IE browsers that don't support onhashchange can use a straightforward polling loop of the hash.
			if (!NDCore.IsIE())
				{
				this.hashChangePoller.Start = function ()
					{
					this.Poll();
					};

				this.hashChangePoller.Stop = function ()
					{
					if (this.timeoutID != undefined)
						{
						clearTimeout(this.timeoutID);
						this.timeoutID = undefined;
						}
					};

				this.hashChangePoller.Poll = function ()
					{
					if (!NDCore.SameHash(location.hash, this.lastHash))
						{
						this.lastHash = location.hash;
						NDFramePage.OnHashChange();
						}

					this.timeoutID = setTimeout("NDFramePage.hashChangePoller.Poll()", this.timeoutLength);
					};
				}

			else  // IE
				{
				// Not only do IE6/7 need the "magical" iframe treatment, but so does IE8
				// when running in IE7 compatibility mode.

				this.hashChangePoller.Start = function ()
					{
					// Create a hidden iframe for history handling.
					var iframeElement = document.createElement("iframe");

					// Attempt to make it as hidden as possible by using techniques from
					// http://www.paciellogroup.com/blog/?p=604
					iframeElement.title = "empty";
					iframeElement.tabindex = -1;
					iframeElement.style.display = "none";
					iframeElement.width = 0;
					iframeElement.height = 0;
					iframeElement.src = "javascript:0";

					this.firstRun = true;

					iframeElement.attachEvent("onload",
						function ()
							{
							if (NDFramePage.hashChangePoller.firstRun)
								{
								NDFramePage.hashChangePoller.firstRun = false;
								NDFramePage.hashChangePoller.SetHistory(location.hash);

								NDFramePage.hashChangePoller.Poll();
								}
							}
						);

					// jQuery HashChange Event does some stuff I'm not 100% clear on to "append iframe after
					// the end of the body to prevent unnecessary initial page scrolling (yes, this works)."  Bah,
					// screw it, let's just go with straightforward.
					document.body.appendChild(iframeElement);

					this.iframe = iframeElement.contentWindow;

					// Whenever the document.title changes, update the iframe's title to
					// prettify the back/next history menu entries.  Since IE sometimes
					// errors with "Unspecified error" the very first time this is set
					// (yes, very useful) wrap this with a try/catch block.
					document.onpropertychange = function ()
						{
						if (event.propertyName == "title")
							{
							try
								{  NDFramePage.hashChangePoller.iframe.document.title = document.title;  }
							catch(e)
								{  }
							}
						};
					};

				// No Stop method since an IE6/7 iframe was created.  Even
				// without an event handler the polling loop would still be necessary
				// for back/next to work at all!
				this.hashChangePoller.Stop = function () { };


				this.hashChangePoller.Poll = function ()
					{
					var hash = location.hash;
					var historyHash = this.GetHistory();

					// If location.hash changed, which covers mouse clicks and manual editing
					if (!NDCore.SameHash(hash, this.lastHash))
						{
						this.lastHash = location.hash;
						this.SetHistory(hash, historyHash);
						NDFramePage.OnHashChange();
						}

					// If historyHash changed, which covers back and forward buttons
					else if (!NDCore.SameHash(historyHash, this.lastHash))
						{
						location.href = location.href.replace( /#.*/, '' ) + historyHash;
						}

					this.timeoutID = setTimeout("NDFramePage.hashChangePoller.Poll()", this.timeoutLength);
					};

				this.hashChangePoller.GetHistory = function ()
					{
					return this.iframe.location.hash;
					};

				this.hashChangePoller.SetHistory = function (hash, historyHash)
					{
					if (!NDCore.SameHash(hash, historyHash))
						{
						// Update iframe with any initial document.title that might be set.
						this.iframe.document.title = document.title;

						// Opening the iframe's document after it has been closed is what
						// actually adds a history entry.
						this.iframe.document.open();

						this.iframe.document.close();

						// Update the iframe's hash, for great justice.
						this.iframe.location.hash = hash;
						}
					};
				}

			this.hashChangePoller.Start();
			}
		};



	// Group: Variables
	// ________________________________________________________________________

	/* var: projectTitle
		The project title in HTML.
	*/

	/* var: contentPath
		This will be the path to the output file used for the content area of the page.
	*/


	// Group: Panel Variables
	// ________________________________________________________________________

	/* var: topmostPanel
		Which of the panels is on top, which will be one of:

		`FilePanel - The source file panel.
		`ClassPanel - The class panel.
		`SummaryPanel - The summary panel if it's collapsed into the other two.  If it's open side by side the
								topmost panel will always be one of the other two.
	*/
		// Substitutions:
		//		`FilePanel = 0
		//		`ClassPanel = 1
		//		`SummaryPanel = 2


	/* var: summaryPanelIsExpanded
		Whether the summary panel is side by side with the other two instead of collapsed into a tab.
	*/


	// Group: Hash Variables
	// ________________________________________________________________________

	/* var: hashType
		The type of the hash path, which will be one of:

		`HomeHash - An empty hash or any unrecognized hash format which cause the home page to show up.
		`FileHash - A file location, such as "File2:Folder/Folder/Source.cs:Function".
	*/
			// Substitutions:
			//    `HomeHash = 0
			//    `FileHash = 1

	/* var: hashPath
		If <hashType> is `FileHash, the path portion of the hash, such as "File2:Folder/Folder/Source.cs".
	*/

	/* var: hashAnchor
		If <hashType> is  `FileHash, the anchor within the <hashPath> file that should be used.  In the example
		"File2:Folder/Folder/Source.cs:Function", this would be "Function".
	*/

	/* var: hashChangePoller
		An object to assist with hash change polling on browsers that don't support onhashchange.  Only used in
		<AddHashChangeHandler()>.
	*/

	};