/*
	Include in output:

	This file is part of Natural Docs, which is Copyright © 2003-2013 Greg Valure.
	Natural Docs is licensed under version 3 of the GNU Affero General Public
	License (AGPL).  Refer to License.txt or www.naturaldocs.org for the
	complete details.

	This file may be distributed with documentation files generated by Natural Docs.
	Such documentation is not covered by Natural Docs' copyright and licensing,
	and may have its own copyright and distribution terms as decided by its author.

*/

"use strict";


/* Class: NDSearch
	___________________________________________________________________________

*/
var NDSearch = new function ()
	{

	// Group: Functions
	// ________________________________________________________________________


	/* Function: Start
	*/
	this.Start = function ()
		{
		this.searchField = document.getElementById("NDSearchField");

		this.searchField.onfocus = function () {  NDSearch.OnFocus(true);  };
		this.searchField.onblur = function () {  NDSearch.OnFocus(false);  };
		this.searchField.onkeyup = function (event) {  NDSearch.OnKeyUp(event);  };

		this.searchResults = document.createElement("div");
		this.searchResults.id = "NDSearchResults";
		this.searchResults.style.display = "none";
		this.searchResults.style.position = "fixed";

		if (NDCore.IEVersion() == 6)
			{  this.searchResults.style.position = "absolute";  }

		this.searchResults.style.zIndex = 22;  // documented in default.css
		document.body.appendChild(this.searchResults);

		this.Deactivate();
		};


	/* Function: Activate
	*/
	this.Activate = function ()
		{
		this.searchField.value = "";
		NDCore.RemoveClass(this.searchField, "DefaultText");
		};

	
	/* Function: Deactivate
	*/
	this.Deactivate = function ()
		{
		this.HideResults();

		NDCore.AddClass(this.searchField, "DefaultText");
		this.searchField.value = `Locale{HTML.DefaultSearchText};

		// Set focus to the content page iframe so that keyboard scrolling works without clicking over to it.
		document.getElementById("CFrame").contentWindow.focus();
		};


	/* Function: ShowResults
	*/
	this.ShowResults = function ()
		{
		this.searchResults.style.display = "block";
		this.PositionResults();
		};


	/* Function: HideResults
	*/
	this.HideResults = function ()
		{
		this.searchResults.style.display = "none";
		};
	

	/* Function: PositionResults
	*/
	this.PositionResults = function ()
		{
		this.searchResults.style.visibility = "hidden";


		// First set the position to 0,0 and the width and height back to auto so it will be sized naturally to its content

		NDCore.SetToAbsolutePosition(this.searchResults, 0, 0, undefined, undefined);
		this.searchResults.style.width = "";
		this.searchResults.style.height = "";

		
		// Figure out our desired upper right coordinates

		var urX = this.searchField.offsetLeft + this.searchField.offsetWidth;
		var urY = this.searchField.offsetTop + this.searchField.offsetHeight + 5;


		// Figure out our maximum width/height so we don't go off the screen.  We include the footer height not because
		// we care about covering the footer, but because it serves as a good estimate for the URL popup you get in
		// Firefox and Chrome.

		var footer = document.getElementById("NDFooter");

		var maxWidth = urX;
		var maxHeight = NDCore.WindowClientHeight() - urY - footer.offsetHeight - 2;


		// Resize

		if (this.searchResults.offsetHeight > maxHeight)
			{  NDCore.SetToAbsolutePosition(this.searchResults, undefined, undefined, undefined, maxHeight);  }
		if (this.searchResults.offsetWidth > maxWidth)
			{  NDCore.SetToAbsolutePosition(this.searchResults, undefined, undefined, maxWidth, undefined);  }
		else
			{
			// Firefox and Chrome will sometimes not set the automatic width correctly, leaving a horizontal scroll bar where 
			// one isn't necessary.  Weird.  Fix it up for them.  This also fixes the positioning for IE 6 and 7.
			if (this.searchResults.scrollWidth > this.searchResults.clientWidth)
				{
				var newWidth = this.searchResults.offsetWidth + (this.searchResults.scrollWidth - this.searchResults.clientWidth) + 5;

				if (newWidth > maxWidth)
					{  newWidth = maxWidth;  }

				NDCore.SetToAbsolutePosition(this.searchResults, undefined, undefined, newWidth, undefined);
				}
			}


		// Reposition

		NDCore.SetToAbsolutePosition(this.searchResults, urX - this.searchResults.offsetWidth, urY, undefined, undefined);


		this.searchResults.style.visibility = "visible";
		};


	/* Function: MakeSearchText
		Converts the raw text as entered into a normalized form compatible with the search text Natural Docs 
		generates.  It will fill in <searchText> and <altSearchText>.
	*/
	this.MakeSearchText = function (input)
		{
		// DEPENDENCY: This must match what is done in Engine.SearchIndex.Entry.Normalize().

		input = input.toLowerCase();

		// Trim and condense whitespace
		input = input.replace(/\s+/g, " ");
		input = input.replace(/^ /, "");
		input = input.replace(/ $/, "");

		// Remove spaces unless between two alphanumeric/underscore characters
		input = input.replace(/([^a-z0-9_]) /g, "$1");  // Substitution because JavaScript has no (?<=) for lookbehinds
		input = input.replace(/ (?=[^a-z0-9_])/g, "");

		// Normalize separators
		input = input.replace(/::|->/g, ".");
		input = input.replace(/\\/g, "/");

		// Remove leading separators.  We don't have to worry about whitespace between them and the rest.
		input = input.replace(/^[./]+/, "");


		this.searchText = input;


		// If the search text ends with : or - it's possible that it's the first character of :: or ->.  Provide an alternate
		// search string so relevant results don't disappear until the second character is added.

		var lastChar = input.charAt(input.length - 1);

		if (lastChar == ":" || lastChar == "-")
			{  this.altSearchText = input.substr(0, input.length - 1) + ".";  }
		else
			{  this.altSearchText = undefined;  }
		};



	// Group: Event Handlers
	// ________________________________________________________________________


	/* Function: OnFocus
	*/
	this.OnFocus = function (isActive)
		{
		if (isActive)
			{  this.Activate();  }
		else
			{  this.Deactivate();  }
		};


	/* Function: OnKeyUp
	*/
	this.OnKeyUp = function (event)
		{
		if (event === undefined)
			{  event = window.event;  }

		if (event.keyCode == 27)  // ESC
			{  this.Deactivate();  }
		else
			{  this.OnChange();  }
		}


	/* Function: OnChange
	*/
	this.OnChange = function ()
		{
		this.MakeSearchText(this.searchField.value);

		var output;

		if (this.searchText == undefined || this.searchText == "")
			{  output = "(none)";  }
		else
			{
			output = "[" + this.searchText + "]";

			if (this.altSearchText != undefined && this.altSearchText != "")
				{  output += "<br>[" + this.altSearchText + "]";  }
			}

		output = "<pre>" + output + "</pre>";
		
		for (var i = 0; i < this.searchText.length * 10; i++)
			{  
			output += "<br>";
			for (var j = 0; j < this.searchText.length; j++)
				{  output += "xxxxxxxxxxxxxxx";  }
			}

		this.searchResults.innerHTML = output;
		this.ShowResults();
		}


	/* Function: OnUpdateLayout
	*/
	this.OnUpdateLayout = function ()
		{
		if (this.searchResults != undefined)
			{  this.PositionResults();  }
		};



	// Group: Variables
	// ________________________________________________________________________

	/* var: searchField
		The search field DOM element.
	*/

	/* var: searchResults
		The search results DOM element.
	*/

	/* var: searchText
		The current search text, normalized.
	*/

	/* var: altSearchText
		An alternate version of the current search text, normalized, if any.  This is for if there can
		be two interpretations of the search text as written.
	*/

	};
