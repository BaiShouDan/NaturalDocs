/*
	Include in output:

	This file is part of Natural Docs, which is Copyright © 2003-2011 Greg Valure.
	Natural Docs is licensed under version 3 of the GNU Affero General Public
	License (AGPL).  Refer to License.txt or www.naturaldocs.org for the
	complete details.

	This file may be distributed with documentation files generated by Natural Docs.
	Such documentation is not covered by Natural Docs' copyright and licensing,
	and may have its own copyright and distribution terms as decided by its author.


	Substitutions:

		Summary Language Members:

			`Language_NameHTML = 0
			`Language_SimpleIdentifier = 1

		Summary Topic Types Members:

			`TopicType_PluralNameHTML = 0
			`TopicType_SimpleIdentifier = 1

		Summary Entry Members:

			`Entry_TopicID = 0
			`Entry_LanguageIndex = 1
			`Entry_TopicTypeIndex = 2
			`Entry_NameHTML = 3
			`Entry_Symbol = 4

		Other

			`ToolTipDelay = 350

*/

"use strict";


/* Class: NDSummary
	___________________________________________________________________________

*/
var NDSummary = new function ()
	{

	// Group: Functions
	// ________________________________________________________________________


	/* Function: Start
	*/
	this.Start = function ()
		{
		this.UpdateSummary();

		var ieVersion = NDCore.IEVersion();

		this.toolTipHolder = document.createElement("div");
		this.toolTipHolder.style.display = "none";
		this.toolTipHolder.style.position = "fixed";

		if (ieVersion != undefined && ieVersion == 6)
			{  this.toolTipHolder.style.position = "absolute";  }

		this.toolTipHolder.style.zIndex = 21;  // documented in default.css
		document.body.appendChild(this.toolTipHolder);
		};


	/* Function: GoToFileHashPath
		Changes the current summary to the passed hash string, such as "File2:folder/folder/file.cs".
	*/
	this.GoToFileHashPath = function (hashPath)
		{
		var head = document.getElementsByTagName("head")[0];


		// Remove the previous loaders if there are any.

		var loader = document.getElementById("NDSummaryLoader");

		if (loader)
			{  head.removeChild(loader);  }

		loader = document.getElementById("NDSummaryToolTipsLoader");

		if (loader)
			{  head.removeChild(loader);  }


		// Reset the state

		this.summaryLanguages = undefined;
		this.summaryTopicTypes = undefined;
		this.summaryEntries = undefined;
		this.summaryToolTips = undefined;


		// Create a new summary loader.  We don't load the tooltips until the summary is complete to
		// avoid having to wait for a potentially large file.

		var script = document.createElement("script");
		script.src = NDCore.FileHashPathToSummaryPath(hashPath);
		script.type = "text/javascript";
		script.id = "NDSummaryLoader";

		head.appendChild(script);
		};


	/* Function: OnSummaryLoaded
	*/
	this.OnSummaryLoaded = function (hashPath, summaryLanguages, summaryTopicTypes, summaryEntries)
		{
		if (hashPath == NDFramePage.hashPath)
			{
			this.summaryLanguages = summaryLanguages;
			this.summaryTopicTypes = summaryTopicTypes;
			this.summaryEntries = summaryEntries;

			this.UpdateSummary();


			// Load the tooltips.  We only do this after the summary is loaded to avoid having to wait for it.

			var head = document.getElementsByTagName("head")[0];

			var script = document.createElement("script");
			script.src = NDCore.FileHashPathToSummaryToolTipsPath(hashPath);
			script.type = "text/javascript";
			script.id = "NDSummaryToolTipsLoader";

			head.appendChild(script);
			}
		};


	/* Function: OnSummaryToolTipsLoaded
	*/
	this.OnSummaryToolTipsLoaded = function (hashPath, summaryToolTips)
		{
		if (hashPath == NDFramePage.hashPath)
			{
			this.summaryToolTips = summaryToolTips;

			// The user may already be hovering over a summary entry by the time the tooltips are loaded.
			if (this.showingToolTip != undefined)
				{  this.ShowToolTip();  }
			}
		};


	/* Function: UpdateSummary
	*/
	this.UpdateSummary = function ()
		{
		var newContent = document.createElement("div");
		newContent.id = "SContent";

		if (this.summaryEntries == undefined)
			{
			var loadingNotice = document.createElement("div");
			loadingNotice.className = "SLoadingNotice";
			newContent.appendChild(loadingNotice);
			}
		else
			{
			var mouseOverHandler = function (e) {  NDSummary.OnEntryMouseOver(e);  };
			var mouseOutHandler = function (e) {  NDSummary.OnEntryMouseOut(e);  };

			for (var i = 0; i < this.summaryEntries.length; i++)
				{
				var entry = this.summaryEntries[i];
				var entryHTML = document.createElement("a");

				var classString = "SEntry" +
					" L" + this.summaryLanguages[ entry[`Entry_LanguageIndex] ][`Language_SimpleIdentifier] +
					" T" + this.summaryTopicTypes[ entry[`Entry_TopicTypeIndex] ][`TopicType_SimpleIdentifier] +
					(i == 0 ? " first" : "") +
					(i == this.summaryEntries.length - 1 ? " last" : "");

				entryHTML.id = "SEntry" + entry[`Entry_TopicID];
				entryHTML.className = classString;
				entryHTML.setAttribute("href", "javascript:NDSummary.GoToAnchor(\"" + entry[`Entry_Symbol] + "\")");
				entryHTML.innerHTML = "<div class=\"SEntryIcon\"></div>" + entry[`Entry_NameHTML];
				entryHTML.onmouseover = mouseOverHandler;
				entryHTML.onmouseout = mouseOutHandler;

				// Unfortunately, hovering over the qualifier span in the title counts as moving off the underlying entry.
				// We need to add the event handlers to the qualifier as well.
				var entryHTMLChild = entryHTML.firstChild;

				if (entryHTMLChild != undefined && NDCore.HasClass(entryHTMLChild, "qualifier"))
					{
					entryHTMLChild.onmouseover = mouseOverHandler;
					entryHTMLChild.onmouseout = mouseOutHandler;
					}

				newContent.appendChild(entryHTML);
				}
			}

		var oldContent = document.getElementById("SContent");
		oldContent.parentNode.replaceChild(newContent, oldContent);
		};


	/* Function: GoToAnchor
	*/
	this.GoToAnchor = function (anchor)
		{
		// First kill the tool tip.  If it was open and they clicked the entry, obviously they want the whole topic
		// and the tool tip is just in the way now.
		this.ResetToolTip();

		var frame = document.getElementById("CFrame");

		anchor = anchor.EntityDecode();

		// Chrome doesn't let you replace just the hash, so rebuild an entirely new URL using NDFramePage.
		frame.contentWindow.location = NDFramePage.contentPath + "#" + anchor;

		// Set focus to the content page iframe so that keyboard scrolling works without clicking over to it.
		frame.contentWindow.focus();
		};


	/* Function: OnEntryMouseOver
	*/
	this.OnEntryMouseOver = function (event)
		{
		if (event == undefined)
			{  event = window.event;  }

		var entry = event.target || event.srcElement;

		if (NDCore.HasClass(entry, "qualifier"))
			{  entry = entry.parentNode;  }

		var id = this.GetTopicIDFromDOMID(entry.id);

		if (this.showingToolTip != id)
			{
			this.ResetToolTip();
			this.showingToolTip = id;

			if (this.summaryToolTips == undefined)
				{
				// OnSummaryToolTipsLoaded() will handle it.
				}
			else if (this.summaryToolTips[id] != undefined)
				{
				// If we're going to display the same tooltip we previously did, skip the delay.  This prevents the
				// tooltip from (visibly) flickering when moving between the qualifier of an entry and the rest of it.
				if (id == this.lastToolTip)
					{
					this.ShowToolTip();
					}

				// Otherwise only show the tooltip on a delay.  This prevents a lot of visual noise when moving the
				// mouse quickly over a summary as tooltips don't pop in and out of existence for split seconds.
				else
					{
					this.toolTipTimeout = setTimeout(function ()
						{
						clearTimeout(this.toolTipTimeout);
						this.toolTipTimeout = undefined;

						NDSummary.ShowToolTip();
						}, `ToolTipDelay);
					}
				}
			}
		};


	/* Function: OnEntryMouseOut
	*/
	this.OnEntryMouseOut = function (event)
		{
		if (event == undefined)
			{  event = window.event;  }

		var entry = event.target || event.srcElement;

		if (NDCore.HasClass(entry, "qualifier"))
			{  entry = entry.parentNode;  }

		var id = this.GetTopicIDFromDOMID(entry.id);

		if (this.showingToolTip == id)
			{  this.ResetToolTip();  }
		};


	/* Function: GetTopicIDFromDOMID
		Extracts the topic ID from the DOM ID, such as SEntry123, and returns it as a number.  Returns -1 if it
		couldn't find it.
	*/
	this.GetTopicIDFromDOMID = function (domID)
		{
		// Extract from "SEntry123".
		var id = parseInt(domID.substr(6), 10);

		if (id != NaN && id > 0)
			{  return id;  }
		else
			{  return -1;  }
		};


	/* Function: ShowToolTip
		Displays the tooltip specified in <showingToolTip>.  Assumes <summaryToolTips> is loaded and an entry already
		exists for <showingToolTip>.
	*/
	this.ShowToolTip = function ()
		{
		var entry = document.getElementById("SEntry" + this.showingToolTip);

		this.toolTipHolder.innerHTML = this.summaryToolTips[this.showingToolTip];
		this.toolTipHolder.style.display = "block";

		// The entry's offsets are relative to the summary block, so we have to add them in.
		var summaryBlock = document.getElementById("NDSummary");

		var x = summaryBlock.offsetLeft + entry.offsetLeft + entry.offsetWidth;
		var y = summaryBlock.offsetTop + entry.offsetTop - summaryBlock.scrollTop;
		var newWidth = undefined;
		var maxWidth = NDCore.WindowClientWidth() - x;

		if (this.toolTipHolder.offsetWidth > maxWidth)
			{  newWidth = maxWidth;  }
		// Otherwise leave undefined which will make SetToAbsolutePosition() leave it alone.

		NDCore.SetToAbsolutePosition(this.toolTipHolder, x, y, newWidth, undefined);

		var prototypes = NDCore.GetElementsByClassName(this.toolTipHolder, "NDPrototype", "div");
		if (prototypes.length > 0 && NDCore.HasClass(prototypes[0], "ShortForm") &&
			prototypes[0].scrollWidth > prototypes[0].offsetWidth)
			{
			NDCore.ChangePrototypeToLongForm(prototypes[0]);
			}

		// Make sure the bottom doesn't go off the visible page.  We do this in a separate step because
		// setting the width may have changed the height due to wrapping.
		if (y + this.toolTipHolder.offsetHeight > NDCore.WindowClientHeight())
			{
			var newY = NDCore.WindowClientHeight() - this.toolTipHolder.offsetHeight;

			if (newY < 0)
				{  newY = 0;  }

			NDCore.SetToAbsolutePosition(this.toolTipHolder, undefined, newY, undefined, undefined);
			}
		};


	/* Function: ResetToolTip
	*/
	this.ResetToolTip = function ()
		{
		if (this.showingToolTip != undefined)
			{
			this.toolTipHolder.style.display = "none";

			// Reset the width.  It may have been set to make sure the tooltip fits entirely inside the window.
			// We want to allow it to get bigger if the window has more room again.
			this.toolTipHolder.style.width = null;

			this.lastToolTip = this.showingToolTip;
			this.showingToolTip = undefined;
			}

		if (this.toolTipTimeout != undefined)
			{
			clearTimeout(this.toolTipTimeout);
			this.toolTipTimeout = undefined;
			}
		};



	// Group: Variables
	// ________________________________________________________________________


	/* var: summaryLanguages
	*/

	/* var: summaryTopicTypes
	*/

	/* var: summaryEntries
	*/

	/* var: summaryToolTips
		A hash mapping topic IDs to the complete HTML of the tooltip.
	*/

	/* var: showingToolTip
		The topic ID of the tooltip being displayed, or undefined if none.
	*/

	/* var: lastToolTip
		The topic ID of the tooltip that was last shown.  Only relevant when <showingToolTip> is undefined.
	*/

	/* var: toolTipHolder
		The DOM element which contains the tooltip.  If none is being shown it will exist but be set to
		display: none.
	*/

	/* var: toolTipTimeout
		The timeout used to display the tooltip.
	*/
	};
